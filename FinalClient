import time
import paho.mqtt.client as mqtt
import email
import imaplib
import smtplib
import json
from email.mime.text import MIMEText

payload = None

def on_connect(client, userdata, flags, rc):
    print("Connected")
    client.subscribe(topic, qos=1)

def on_message(client, userdata, msg):
    global payload
    payload = msg.payload
    print(str(msg.payload))

def deleteEmailIMAP(username, password, IMAP):
    mail = imaplib.IMAP4_SSL(IMAP)
    mail.login(username, password)
    mail.select("inbox")
    type, data = mail.search(None, 'ALL')
    for num in data[0].split():
        mail.store(num, '+FLAGS', r'(\Deleted)')
    mail.expunge()

def correctID(mail_from, topic, from_addr, to_addrs, smtp_ssl_host, smtp_ssl_port, username, password, SERVER):
    if mail_from == "Anthony <anthony@caprarotechnologies.com>":
        return False
    else:
        message = MIMEText('You are not Authorized')
        message['subject'] = topic
        message['from'] = from_addr
        message['to'] = ', '.join(to_addrs)
        server = smtplib.SMTP_SSL(smtp_ssl_host, smtp_ssl_port)
        server.login(username, password)
        server.sendmail(from_addr, to_addrs, message.as_string())
        server.quit()
        deleteEmailIMAP(username, password, SERVER)
        message = None


EMAIL = 'MYEMAIL'
PASSWORD = 'MYPASS'
SERVER = 'imap.gmail.com'

smtp_ssl_host = 'smtp.gmail.com'
smtp_ssl_port = 465
username = 'MYEMAIL'
password = 'MYPASS'


client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message
client.connect("192.168.60.59", 1883, 60)

client.loop_start()
time.sleep(1)
while True:
    EMAIL = 'MYEMAIL'
    PASSWORD = 'MYPASS'
    SERVER = 'imap.gmail.com'
    try: 
        mail = imaplib.IMAP4_SSL(SERVER)
    except mail.abort:
        mail = imaplib.IMAP4_SSL(SERVER)
    time.sleep(2)
    mail.login(EMAIL, PASSWORD)
    mail.select('inbox')
    status, data = mail.search(None, 'ALL')
    mail_ids = []
    for block in data:
        mail_ids += block.split()
    for i in mail_ids:
        status, data = mail.fetch(i, '(RFC822)')
        for response_part in data:
            if isinstance(response_part, tuple):
                message = email.message_from_bytes(response_part[1])
                mail_from = message['from']
                mail_subject = message['subject']
                if message.is_multipart():
                    mail_content = ''
                    for part in message.get_payload():
                        if part.get_content_type() == 'text/plain':
                            mail_content += part.get_payload()
                else:
                    mail_content = message.get_payload()
        a = mail_content
        a = a.replace("\r\n", "")
        a = json.loads(a)
        topic = mail_subject
        to_addrs = [mail_from]
        from_addr = 'tester1111111117@gmail.com'
        while True:
            if message != None:
                if correctID(mail_from, topic, from_addr, to_addrs, smtp_ssl_host, smtp_ssl_port, username, password, SERVER) != False:
                    break
                else:
                    if a["status"] == "y":
                        client.subscribe(topic, qos=1)
                        time.sleep(3)
                        message = MIMEText(payload.decode("utf-8"))
                        message['subject'] = topic
                        message['from'] = from_addr
                        message['to'] = ', '.join(to_addrs)
                        server = smtplib.SMTP_SSL(smtp_ssl_host, smtp_ssl_port)
                        server.login(username, password)
                        server.sendmail(from_addr, to_addrs, message.as_string())
                        deleteEmailIMAP(username, password, SERVER)
                        server.quit()
                        message = None
                        break
                    elif a["status"] == "n":
                        client.subscribe(topic, qos=1)
                        client.publish(topic, a["action"], qos=0, retain=False)
                        time.sleep(3)
                        message = MIMEText(payload.decode("utf-8"))
                        message['subject'] = topic
                        message['from'] = from_addr
                        message['to'] = ', '.join(to_addrs)
                        server = smtplib.SMTP_SSL(smtp_ssl_host, smtp_ssl_port)
                        server.login(username, password)
                        server.sendmail(from_addr, to_addrs, message.as_string())
                        deleteEmailIMAP(username, password, SERVER)
                        server.quit()
                        message = None
                        break
                    else:
                        message = MIMEText('Not a valid status')
                        message['subject'] = topic
                        message['from'] = from_addr
                        message['to'] = ', '.join(to_addrs)
                        server = smtplib.SMTP_SSL(smtp_ssl_host, smtp_ssl_port)
                        server.login(username, password)
                        server.sendmail(from_addr, to_addrs, message.as_string())
                        deleteEmailIMAP(username, password, SERVER)
                        server.quit()
                        message = None
                        break
client.loop_stop()
client.disconnect()
