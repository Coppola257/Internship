import paho.mqtt.client as mqtt
import time
import email
import imaplib
import smtplib
import json
import base64
from html.parser import HTMLParser
from email.mime.text import MIMEText

client = mqtt.Client("Requester")

payload = None

def on_connect(client, userdata, flags, rc):
    print("Publisher connected to a broker\n")
    client.subscribe("A")

def on_message(client, userdata, message):
    global payload
    payload = message.payload.decode()
    print("Recieve: "+payload)

def deleteEmailIMAP(username, password, IMAP):
    mail = imaplib.IMAP4_SSL(IMAP)
    mail.login(username, password)
    mail.select("inbox")
    type, data = mail.search(None, 'ALL')
    for num in data[0].split():
        mail.store(num, '+FLAGS', r'(\Deleted)')
    mail.expunge()

class HTMLTextExtractor(HTMLParser):
    def __init__(self):
        HTMLParser.__init__(self)
        self.result = [ ]

    def handle_data(self, d):
        self.result.append(d)

    def handle_charref(self, number):
        codepoint = int(number[1:], 16) if number[0] in (u'x', u'X') else int(number)
        self.result.append(unichr(codepoint))

    def handle_entityref(self, name):
        codepoint = htmlentitydefs.name2codepoint[name]
        self.result.append(unichr(codepoint))

    def get_text(self):
        return u''.join(self.result)

def html_to_text(html):
    s = HTMLTextExtractor()
    s.feed(html)
    return s.get_text()

EMAIL = 'tester1111111117@gmail.com'
PASSWORD = 'capraro2020'
SERVER = 'imap.gmail.com'

smtp_ssl_host = 'smtp.gmail.com'
smtp_ssl_port = 465
username = 'tester1111111117@gmail.com'
password = 'capraro2020'

client._on_connect = on_connect
client.on_message = on_message
client.connect("localhost", 1885)


while True:
    client.loop_start()
    time.sleep(1)
    EMAIL = 'tester1111111117@gmail.com'
    PASSWORD = 'capraro2020'
    SERVER = 'imap.gmail.com'
    try: 
        mail = imaplib.IMAP4_SSL(SERVER)
    except mail.abort:
        mail = imaplib.IMAP4_SSL(SERVER)
    time.sleep(2)
    mail.login(EMAIL, PASSWORD)
    mail.select('inbox')
    status, data = mail.search(None, 'ALL')
    mail_ids = []
    for block in data:
        mail_ids += block.split()
    for i in mail_ids:
        status, data = mail.fetch(i, '(RFC822)')
        for response_part in data:
            if isinstance(response_part, tuple):
                message = email.message_from_bytes(response_part[1])
                mail_from = message['from']
                mail_subject = message['subject']
                if message.is_multipart():
                    mail_content = ''
                    for part in message.get_payload():
                        if part.get_content_type() == 'text/plain':
                            mail_content += part.get_payload()
                else:
                    mail_content = message.get_payload()
        a = mail_content
        a = base64.urlsafe_b64decode(a).decode("utf-8")
        a = html_to_text(a)
        a = a.replace("\r\n", "")
        a = json.loads(a)
        topic = mail_subject
        to_addrs = [mail_from]
        from_addr = 'tester1111111117@gmail.com'
        while True:
            if message != None:
                if a["status"] == "y":
                    client.subscribe(topic, qos=1)
                    time.sleep(3)
                    message = MIMEText(payload)
                    message['subject'] = topic
                    message['from'] = from_addr
                    message['to'] = ', '.join(to_addrs)
                    server = smtplib.SMTP_SSL(smtp_ssl_host, smtp_ssl_port)
                    server.login(username, password)
                    server.sendmail(from_addr, to_addrs, message.as_string())
                    deleteEmailIMAP(username, password, SERVER)
                    server.quit()
                    message = None
                    break
                elif a["status"] == "n":
                    client.subscribe(topic, qos=1)
                    client.publish(topic, a["action"], qos=0, retain=False)
                    time.sleep(3)
                    message = MIMEText(payload)
                    message['subject'] = topic
                    message['from'] = from_addr
                    message['to'] = ', '.join(to_addrs)
                    server = smtplib.SMTP_SSL(smtp_ssl_host, smtp_ssl_port)
                    server.login(username, password)
                    server.sendmail(from_addr, to_addrs, message.as_string())
                    deleteEmailIMAP(username, password, SERVER)
                    server.quit()
                    message = None
                    break
                else:
                    message = MIMEText('Not a valid status')
                    message['subject'] = topic
                    message['from'] = from_addr
                    message['to'] = ', '.join(to_addrs)
                    server = smtplib.SMTP_SSL(smtp_ssl_host, smtp_ssl_port)
                    server.login(username, password)
                    server.sendmail(from_addr, to_addrs, message.as_string())
                    deleteEmailIMAP(username, password, SERVER)
                    server.quit()
                    message = None
                    break
    time.sleep(1)
client.loop_stop()
client.disconnect()
